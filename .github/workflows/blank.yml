name: CI

on:
  push:
    branches:
      - livros
  pull_request:
    branches:
      - livros

jobs:
  build:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Instalar Poetry (via Action Oficial)
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Verificar instalação do Poetry
        run: poetry --version

      - name: Criar arquivo .env
        run: |
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=your-secret-key" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres" >> .env
          echo "ALLOWED_HOSTS=*" >> .env

      - name: Instalar dependências com Poetry
        run: poetry install --no-interaction --no-root

      - name: Aguardar PostgreSQL
        run: |
          until pg_isready -h postgres -U postgres; do
            echo "Aguardando PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL está pronto!"

      - name: Aplicar Migrações do Django
        run: poetry run python manage.py migrate

      - name: Rodar flake8 (Análise de Código)
        uses: py-actions/flake8@v2
        with:
          checkName: 'flake8_py3'
          path: '.'

      - name: Rodar Testes Automáticos
        env:
          DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
        run: poetry run pytest --cov=biblioteca

      - name: Relatório Coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: poetry run codecov

